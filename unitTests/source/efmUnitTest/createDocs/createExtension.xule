
/** EXTRACT DATA TO MAKE  Taxonomy
-------------------------------------**/
constant $CONCEPTS = csv-data('/Users/campbellpryde/Documents/GitHub/xule/unitTests/output/EFMUnitTests/concepts.csv',false, list( 'string','string', 'string', 'string','string','qname', 'string','qname', 'string','string','string','string'))

constant $UNIT_TEST_LISTS = list('e60501000gd','e60501001ng','i00200gd','i00201gd','i00202gd') /**,'i00200gd','i00201gd','i00202gd','i00203gd','i00204gd'**/

constant $ROLES = csv-data('https://raw.githubusercontent.com/xbrlus/xule/main/unitTests/output/EFMUnitTests/roles.csv',false, list( 'string','string','string','string','string'))

constant $RELATIONSHIPS = csv-data('/Users/campbellpryde/Documents/GitHub/xule/unitTests/output/EFMUnitTests/relationships.csv',false, list('string','string', 'string', 'string','qname','string', 'string','string', 'string','string','string','string'))

constant $LABELS = csv-data('/Users/campbellpryde/Documents/GitHub/xule/unitTests/output/EFMUnitTests/labels.csv',false, list( 'string','string','string','string','string','string','string'))

constant $FACTS_DATA = csv-data('/Users/campbellpryde/Documents/GitHub/xule/unitTests/output/EFMUnitTests/facts.csv',false, list( 'string'/**1-test**/,'string'/**2-file**/,'string'/**3-fact**/,'qname'/**4-elementName**/,'string'/**5-unit**/,'string'/**6-dimension**/,'string'/**7-scheme**/,'string'/**8-scheme-id**/,'string'/**9-period**/))

constant $TEST_CASE_LIST = sum(csv-data('/Users/campbellpryde/Documents/GitHub/xule/unitTests/output/EFMUnitTests/testcase.csv',false, list( 'string')))

constant $IMPORTS = csv-data('/Users/campbellpryde/Documents/GitHub/xule/unitTests/output/EFMUnitTests/namespaceLocations.csv',false, list( 'string','string', 'string' ))

constant $SCHEMA = csv-data('/Users/campbellpryde/Documents/GitHub/xule/unitTests/output/EFMUnitTests/schema.csv',false, list('string','string','string'))

/** DEFINE THE PACKAGE 
-----------------------**/

output create_base_unit_taxonomy
for $unitTest in  $TEST_CASE_LIST
        $packageData = first(filter $SCHEMA where $item[1] == $unitTest)
        $importData = filter $IMPORTS where $item[1] == $unitTest and $item[3] != $packageData[2] returns $item[3]
        $unitTest

package-name $unitTest
package-url 'http://xbrl.sec.gov/efm/2023'
document-uri $packageData[2].substring(($packageData[2].last-index-of('/'))+1)
document-namespace $packageData[3]
document-import list('http://xbrl.sec.gov/dei/2023/dei-2023.xsd','http://www.xbrl.org/2005/xbrldt-2005.xsd').to-xodel 
document-package-entry-point true
document-package-entry-point-description 'EFM TEST CASE FOR ' + $packageData[1].to-xodel
document-package-entry-point-language 'en'
document-package-entry-point-name 'abc'


output import_dimensions_taxonomy1
for $unitTest in  $TEST_CASE_LIST
    /**$packageData = first(filter $SCHEMA where $item[1] == $unitTest)
    $importData = filter $IMPORTS where $item[1] == $unitTest and $item[3] != $packageData[2] returns $item[3]**/
   $importData = list('http://xbrl.sec.gov/dei/2023/dei-2023.xsd','http://www.xbrl.org/2005/xbrldt-2005.xsd', 'https://xbrl.ifrs.org/taxonomy/2023-03-23/full_ifrs/full_ifrs-cor_2023-03-23.xsd') 
        for $imp in   $importData
           list($unitTest,$imp)
            

package-name $rule-value[1]
import2-url $rule-value[2]


output create_concepts
$baseItem = taxonomy().concept(dei:EntityCentralIndexKey)
for $unitTest in  $TEST_CASE_LIST
    for $extension in filter $CONCEPTS where $item[1] == $unitTest
        $extension

package-name $unitTest
document-uri  $extension[2].substring(($extension[2].last-index-of('/'))+1).to-xodel
document-namespace $extension[3].to-xodel
concept-namespace  $extension[3].to-xodel
concept-id  $extension[7].to-xodel
concept-local-name  $extension[4].to-xodel
concept-period-type duration.to-xodel
concept-data-type $extension[6].to-xodel
concept-substitution-group $extension[8].to-xodel
concept-abstract ($extension[10]=='True').to-xodel
concept-nillable ($extension[9]=='true').to-xodel
concept-balance-type (if $extension[11] == '' none else $extension[11]).to-xodel


output create_roles
for $unitTest in  $TEST_CASE_LIST
    for $role in (filter $ROLES where $item[1] == $unitTest)
        $used-on = if $role[5].contains('(link:calculationLink, link:definitionLink, link:presentationLink)')  
                    list('Presentation','Calculation','Definition')
                    else
                        if $role[5].contains('(link:definitionLink, link:presentationLink)') 
                            list('Presentation','Definition')
                        else
                            if $role[5].contains('(link:presentationLink)') 
                                list('Presentation','Definition')
                            else
                                list()
        $role

package-name $unitTest
document-uri $role[2].substring(($role[2].last-index-of('/'))+1).to-xodel
role-uri $role[3].to-xodel
role-definition $role[4].to-xodel
role-used-on  $used-on.to-xodel

output create_relationships
for $unitTest in  $TEST_CASE_LIST
    for $relationship in (filter $RELATIONSHIPS where $item[1] == $unitTest)
        (filter $CONCEPTS where $item[1] == $unitTest)[1][2]

package-name $unitTest
document-uri $relationship[2].substring(($relationship[2].last-index-of('/'))+1).to-xodel
document-imported-in $rule-value.substring(($rule-value.last-index-of('/'))+1).to-xodel
relationship-source  qname($relationship[6], $relationship[7]).to-xodel
relationship-target  qname($relationship[8], $relationship[9]).to-xodel
relationship-order $relationship[10].to-xodel
relationship-role $relationship[3].to-xodel
relationship-arcrole $relationship[4].to-xodel
relationship-type  $relationship[5].to-xodel


output create_labels
for $unitTest in  $TEST_CASE_LIST
    for $label in (filter $LABELS where $item[1] == $unitTest)
        (filter $CONCEPTS where $item[1] == $unitTest and $label == $label)[1][2]

package-name $unitTest
document-uri $label[2].substring(($label[2].last-index-of('/'))+1).to-xodel
document-imported-in $rule-value.substring(($rule-value.last-index-of('/'))+1).to-xodel
label-concept-name qname($label[3], $label[4]).to-xodel
label-text $label[6]
label-role $label[5]
label-lang $label[7]


output createInstance
for $unitTest in  $TEST_CASE_LIST
     $instance_name = sum(set(for $factItem in ((filter $FACTS_DATA where $item[1] == $unitTest))
                                $factItem[2]));
    $instance_name2 = split($instance_name.substring(($instance_name.last-index-of('/'))+1),".")[1]

    './' + $unitTest + '.zip/' + $unitTest + '/' + $instance_name2 + '.xsd'

instance-name   $instance_name2
instance-taxonomy list($rule-value).to-json

output add_facts_to_instance
for $unitTest in $TEST_CASE_LIST
    for $factItem in (filter $FACTS_DATA where $item[1] == $unitTest)
        $date = if $factItem[9].contains('/')
                    $datesList = $factItem[9].split('/');
                    duration($datesList[1],$datesList[2])
                else
                    date($factItem[9])
        $factItem
fact-instance split($factItem[2].substring(($factItem[2].last-index-of('/'))+1),".")[1]
fact-value $factItem[3].to-xince
fact-concept $factItem[4].to-xince
fact-entity entity($factItem[7],$factItem[8]).to-xince
fact-period $date.to-xince
